! LINGO solver developed for the problem of elaborating water distribution schedules in periods of scarcity;
! developer: Tatiana Balbi Fraga;


MODEL:
! Problem of Elaborating Water Distribution Schedules in Periods of Scarcity;
! New tests;


SETS:

DAYS;

SHIFTS;

LOCALS: 	IDEAL_INFLOW_RATE, 
	  	MAX_INFLOW_RATE, 
	  	MIN_INFLOW_RATE, 
		IDEAL_INFLOW, 
		INITIAL_VOLUME, 
		CAPACITY, 
		RELEVANCE_FACTOR;

DAILY_SHIFTS (DAYS, SHIFTS): c;

SOLUTION (DAYS, SHIFTS, LOCALS): 	VALVE_STATUS, 
						INFLOW, 
						OUTFLOW, 
						RES_VOLUME, 
						IDLE_CAPACITY;

SOLUTION_DAYAND (SOLUTION)| &1 #EQ# N_DAYS #AND# &2 #EQ# N_SHIFTS: IDLE_CAP_EXP_WEIG;

RESERVOIRS(LOCALS) | &1 #LE# N_RESERVOIRS;

ZONES(LOCALS) | &1 #GT# N_RESERVOIRS: 	HOUSEHOLDS, 
				DEMAND, 
				ZONE_AVERAGE_CAPACITY, 
				ZONE_OUTFLOW, 
				DIFF, 
				DEMAND_PER,
				ZONE_OUTFLOW_PER;

DISTRIBUTION(RESERVOIRS, LOCALS): NET;

SOLUTION_RESERVOIRS (DAYS, SHIFTS, RESERVOIRS);

SOLUTION_ZONES (DAYS, SHIFTS, ZONES);

ENDSETS

DATA:

DAYS = @FILE('data.ldt');
SHIFTS = @FILE('data.ldt');
LOCALS = @FILE('data.ldt');
N_RESERVOIRS = @FILE('data.ldt');
HOUSING_COEFF = @FILE('data.ldt');
DAILY_COMSUMPTION = @FILE('data.ldt');
TIME_PER_SHIFT = @FILE('data.ldt');
HOUSEHOLDS = @FILE('data.ldt');
NET = @FILE('data.ldt');
MIN_INFLOW_RATE = @FILE('data.ldt');
MAX_INFLOW_RATE = @FILE('data.ldt');
ZONE_AVERAGE_CAPACITY = @FILE('data.ldt');
CAPACITY = @FILE('data.ldt');

FAIR_RELEVANCE_FACTOR = 10000;
VALVES_RELEVANCE_FACTOR = 0.001;
RELEVANCE_FACTOR = 1.13 1.13 1.12 1.12 1.12 1.12 1.0 1.0 1.0 1.0 1.0 1.0;


ENDDATA

CALC:

N_DAYS = @SIZE(DAYS);
N_SHIFTS = @SIZE(SHIFTS);

N_TOTAL_HOUSEHOLDS = @SUM( ZONES(s): HOUSEHOLDS(s) );

@FOR( ZONES(s): DEMAND(s) = HOUSEHOLDS(s) * HOUSING_COEFF * DAILY_COMSUMPTION * N_DAYS );

TOTAL_DEMAND = @SUM( ZONES(s): DEMAND(s) );

@FOR( ZONES(s): [CALC_DP] DEMAND_PER(s) = DEMAND(s)/TOTAL_DEMAND); 

@FOR( ZONES(s): CAPACITY(s) = HOUSEHOLDS(s) * ZONE_AVERAGE_CAPACITY(s));

@FOR (LOCALS(l): INITIAL_VOLUME(l) = 0);

MAX_INFLOW_RATE_INF = @MAX(LOCALS: MAX_INFLOW_RATE);

@FOR( LOCALS (l):
	@IFC( MAX_INFLOW_RATE (l) #LE# 1.2345678: 
		MAX_INFLOW_RATE (l) = MAX_INFLOW_RATE_INF ) );

@FOR( LOCALS (l):
	@IFC( MIN_INFLOW_RATE (l) #LE# 1.2345678: 
		MIN_INFLOW_RATE(l) = 0.00 ) );

!@FOR (DAILY_SHIFTS(d,s) : 
	c(d,s) = 1 );

@FOR (DAILY_SHIFTS(d,s) : 
	c(d,s) = 100*((N_SHIFTS-s)*N_DAYS + N_DAYS - d + 1) );

CAP_EXP_WEIGHTED_SUM = @SUM( LOCALS(l) : CAPACITY(l)^RELEVANCE_FACTOR(l)) ;

IRRELEVANCE_FACTOR = 1 / CAP_EXP_WEIGHTED_SUM;

ENDCALC

! The objective;

[Eq01] MAX = TOTAL_ZONE_OUTFLOW - FAIR_RELEVANCE_FACTOR*@SUM( ZONES(z): DIFF(z) ) - IRRELEVANCE_FACTOR*IDLE_CAP_EXP_WEIGHTED_SUM
			+ VTERM;

@FOR ( ZONES(z): [Eq01_2T]
	DIFF(z) - @ABS( DEMAND_PER(z) - ZONE_OUTFLOW_PER(z)) = 0 );

@FOR( ZONES(z): [Eq16] ZONE_OUTFLOW_PER(z) - ZONE_OUTFLOW(z)/TOTAL_ZONE_OUTFLOW = 0);

VTERM = VALVES_RELEVANCE_FACTOR*@SUM( SOLUTION(d,s,l): c(d,s)*VALVE_STATUS(d,s,l) );

!Restrictions;

! reservoirs;

@FOR ( SOLUTION_RESERVOIRS(d,s,r): [Eq06]
	OUTFLOW(d,s,r) - @SUM( LOCALS(l): INFLOW(d,s,l) * NET(r,l) ) = 0 );

! zones;

[Eq15] TOTAL_ZONE_OUTFLOW - @SUM(ZONES(z): ZONE_OUTFLOW(z) ) = 0;

@FOR ( ZONES(z): [Eq13]
	ZONE_OUTFLOW(z) - DEMAND(z) <= 0 );

@FOR( ZONES(z): [Eq14]
	ZONE_OUTFLOW(z) - @SUM( DAILY_SHIFTS(d,s): OUTFLOW(d,s,z) ) = 0 );

![CALC_AVER_INFLOW] HOUSEHOLD_AVER_INFLOW - TOTAL_ZONE_OUTFLOW / (N_TOTAL_HOUSEHOLDS * N_DAYS) = 0;
![CALC_INHABIT_AVER_INFLOW] INHABIT_AVER_INFLOW - HOUSEHOLD_AVER_INFLOW / HOUSING_COEFF = 0;

! all locals;

@FOR( LOCALS(l): [Eq04]
	IDEAL_INFLOW_RATE(l) - MAX_INFLOW_RATE(l) <= 0 );

@FOR( LOCALS(l): [Eq05]
	IDEAL_INFLOW_RATE(l) - MIN_INFLOW_RATE(l) >= 0 );

@FOR( LOCALS(l): [Eq03]
	IDEAL_INFLOW(l) - IDEAL_INFLOW_RATE(l) * TIME_PER_SHIFT = 0 );

@FOR( SOLUTION(d,s,l): [Eq02]
	INFLOW(d,s,l) - IDEAL_INFLOW(l) * VALVE_STATUS(d,s,l) = 0 );

@FOR( SOLUTION(d,s,l): [Eq10]
	RES_VOLUME(d,s,l) >= 0  );

@FOR( SOLUTION(d,s,l): [Eq11_Eq12]
	RES_VOLUME(d,s,l) - CAPACITY(l) <= 0  );

@FOR ( SOLUTION(d,s,l) | d #EQ# 1 #AND# s #EQ# 1: [Eq07_09]
	RES_VOLUME(d,s,l) - INITIAL_VOLUME(l) - INFLOW(d,s,l) + OUTFLOW(d,s,l) = 0 );

@FOR ( SOLUTION(d,s,l) | d #NE# 1 #AND# s #EQ# 1: [Eq07]
	RES_VOLUME(d,s,l) - RES_VOLUME(d-1,N_SHIFTS,l) - INFLOW(d,s,l) + OUTFLOW(d,s,l) = 0 );

@FOR ( SOLUTION(d,s,l) | s #NE# 1: [Eq08]
	RES_VOLUME(d,s,l) - RES_VOLUME(d,s-1,l) - INFLOW(d,s,l) + OUTFLOW(d,s,l) = 0 );
 
@FOR( SOLUTION(d,s,l): [Eq17]
	IDLE_CAPACITY(d,s,l) - CAPACITY(l) + RES_VOLUME(d,s,l) = 0);

[Eq18] IDLE_CAP_EXP_WEIGHTED_SUM - @SUM( SOLUTION_DAYAND(d,s,l) : IDLE_CAP_EXP_WEIG(d,s,l) ) = 0;

@FOR( SOLUTION_DAYAND(d,s,l): [Eq18_2T] IDLE_CAP_EXP_WEIG(d,s,l) = IDLE_CAPACITY(d,s,l)^RELEVANCE_FACTOR(l) );

! nature of the variables;

@FOR( SOLUTION: [Eq19]
	@BIN( VALVE_STATUS) );

END